Webapps 
----
  1. Server Side Rendering Apps (SSR)
      * page refresh 
      * traditional webapps 

  2. Client Side Rendering Apps (CSR)
      * pages will not refresh 
      * modern webapps 

      CSR = SPA (Front End Project) + REST API (Back End Project) 

      SPA (Single Page Apps)
      -------
        7 Characteristics 
        ------
          1. Page should not reload [DONE]
          2. URL should change [DONE]
          3. History should be maintained [DONE]
          4. Header and Footer should not be loaded again and again [DONE]
          5. The section in b/w header and footer should show the contextual update [DONE]
          6. Active Menu should be set [TODO]
          7. Page Title should be changed [TODO]

        Disadvantages of SPA
        -----
          1. Initial Loading will take longer (fixable using Lazy Loading a Module in ng)
          2. Not Search Engine friendly (fixable using SSR -- angular universal)

        SPA Tools: 
        ----
          #1 ReactJS (library)
          #2 VueJS (framework)
          #3 Angular (framework -- To learn)
          #4 SvelteJS 

Browser
----
  1. HTML Renderer 
  2. CSS Parser 
  3. JS Engine 
      var x = 10;

    
TypeScript 
----
  TS => (TSC) => JS 


Naming Conventions & Casing Conventions 
----
Casing Types 
  --------
    1. PascalCase 
        * Recommended for Object Oriented Program's classes 
        * also Recommended for Interface in Java & TypeScript 

        examples 
        ---
          class CarDetails {

          }

          interface Employee {

          }

    2. camelCase 
        * Recommended for variables, const, functions, methods in JS & TS 
        * Recommended for id's of html 

        examples 
        -----
          var myCar = 'BMW';

          function getCarInfo() {
            //....
          }
    
    3. kebab-case
        * Recommended for URLs 
        * Recommended for file names, folder names (if not react), assets in front end projects 
        * Recommended for css classes 
        * okay for id's of html elements if your architect says okay

        examples 
        -----
          btn-primary
          slideshow-container 
          youtube-logo.png 

    4. snake_case
        * never ever use this. 
        * okay for const in JS & TS if architect accepts

        examples
        ---
          const MAX_STUDENTS_PER_CLASS = 30;


===========
  Course Project
  ----
    CRUD App 
    ====
      create an employee 
        http://localhost:4200/employees/add
        Component: AddEmployeeComponent

      list employees 
        http://localhost:4200/employees/
        Component: EmployeesComponent

      fetch employee details 
        http://localhost:4200/employees/1
        http://localhost:4200/employees/2
        http://localhost:4200/employees/10
        http://localhost:4200/employees/1003245
        Component: EmployeeDetailsComponent

      update employee details
        http://localhost:4200/employees/1
        http://localhost:4200/employees/2
        http://localhost:4200/employees/10
        http://localhost:4200/employees/1003245
        Component: EmployeeDetailsComponent

      delete employee 
        http://localhost:4200/employees/1
        http://localhost:4200/employees/2
        http://localhost:4200/employees/10
        http://localhost:4200/employees/1003245
        Component: EmployeeDetailsComponent

    Building Blocks 
    ---
      Components [DONE]
      Directives [DONE -- TASK GIVEN]
      Services [DONE]
      Interfaces  [DONE]
      Classes [NOT PART OF OUR COURSE]
      Pipes [DONE]
      Guards [NOT PART OF OUR COURSE]
      Modules [DONE]
      Interceptors [NOT PART OF OUR COURSE]

    Concepts
    ----
      Data Binding [DONE]
      Cross Components Communication [DONE]
      Debugging [DONE]
      Routing [DONE]
      REST API Calls [DONE]
      RxJS, Observables, Subscription [DONE]
      Life Cycle Hooks [DONE]
      Unit Testing 
      Angular Material Integration 
      Git 
      Lazy Loading [DONE]
      Change Detection

Thinking in Angular
---
  1. Finding the number of components 
  2. Identifying the hierarchy of the components 
  3. ...

Project Structure 
-------
  1. Building-Block wise Structure
      src/
        app/
          components/
          directives/
          services/
          pipes/

  2. Feature-wise Structure
      src/
        app/ 
          shared/
          home/
          concepts/
          about/
          contact/
  
  3. Mixed Structure (Recommended)
      src/
        app/
          shared/
            components/
            services/
          home/
            components/
            directives/
          concepts/
            components/
            directives/
          about/
          contact/
            components/
            directives/
            services/

Conventions in Project 
---
  1. Should have right project structure [DONE]
  2. Naming and Casing conventions must be followed [DONE]
  3. 20% code comments [DONE]
  4. code should be properly formatted with 2 spaces of indent [DONE]
  5. code should have not have horizontal scroll bar 
  6. follow linting rules (will setup linting tool later)
  7. follow clean code principles

How to setup ESLint?
===
  ng add @angular-eslint/schematics@14.4.0 

  Ensure you install version 14.x of @angular-eslint/schematics in your ng 14 project

=====



Routing in Angular 
-------------------
Step 0:
  Identify the pages, the URLs and the matching components

  Page              URL                                   Component 
  ==================================================================
  Home              localhost:4200                        HomeComponent
  Concepts          localhost:4200/concepts               ConceptsComponent
  Employees         localhost:4200/employees              EmployeesComponent
  About             localhost:4200/about-us               AboutUsComponent
  Contact           localhost:4200/contact                ContactComponent


Step 1: 
------
  goto menu-list.comp.html, setup the URL for the menus.

Step 2: 
------
  check the app. URL is not stable. Let's fix it by configuring the routes 
  For that, you need to know the components to be loaded for the urls 
  So, Let's create the components 

  ng g c home/components/home -t -s
  ng g c concepts/components/concepts -s
  ng g c employees/components/employees -s
  ng g c about/components/about-us -s -t 
  ng g c contact/components/contact -s -t 

Step 3:
------
  We can now config the routes in app-routing.module.ts 

Step 4:
------
  Check the app. URL is stable. But the component in between 
  header and footer is not getting loaded. Let's fix it. 
  in app.comp.html, let's use router-outlet 

Step 5: 
------
  Check the app. Component is loaded in between header and footer. 
  Now, let's fix the page refresh problem. 

  in menu-list.comp.html, replace href with routerLink.

Step 6:
----
  Check the app. There won't be any page refresh. 


====================================================

Data Binding
------------
  keep the data in comp ts and display it in comp.html 
  TS => HTML 

  1. Interpolation [DONE]
      TS => HTML 
      {{ }}

  2. Property Binding  [DONE]
      TS => HTML 
      []

      Learn about class binding  [ngClass]
      Learn about style binding  [ngStyle]

  3. Event Binding   [DONE]
      TS <== HTML
      ()

  4. Two Way Binding  [DONE]
      TS <=> HTML
      [(ngModel)]
      Note: You can use this in form elements only

  5. Custom Property Binding  [DONE]
  6. Custom Event Binding [DONE]

Cross Component Communication
---------
  1. Parent to Child Component Communication  [DONE]
      using Custom Property Binding

  2. Child to Parent Component Communication [PARTIALLY]
      2.1 using Custom Event Binding [DONE] (or)
      2.2 using @ViewChild() decorator [TODO]

  3. Any to Any Component Communication [PENDING]
      using Services, RxJS/Observables, Subcription

Debugging
----
  1. Compilation Error (during development)
      Check the terminal / cmd prompt        

  2. Runtime Error (during execution in browser)
      Check the browser console 


Directives
-----------
  1. Attribute Directives
     Examples: routerLink, routerLinkActive, 

  2. Structural Directives
      * Impacts of these directives can be seen in structure of the page (html)

      Examples: *ngIf, *ngFor, ngSwitch 

  3. Custom Attribute Directives
      ng g d <directive-name>

  4. Custom Structural Directives
      ng g d <directive-name>
    
  Refer: https://github.com/arunprabu/employee-mgmt-ng-oct2022/tree/master/src/app/concepts/directives

==================

Angular Forms
=============
  1. Template-Driven Forms 
      * easiest 
      * can be built with HTML
      * you can use angular validator in the form of directives
      * it uses ngModel directive 

      Adv
      ----
        1. small learning curve 

      Disadv 
      -----
        1. Not suitable for complex validation 
        2. Not suitable for Unit Testing 


  2. Reactive Forms [RECOMMENDED]
      * easy 
      * can be built with HTML + TS
      * you can use angular validator and also use custom validators 

      Adv
      ----
        1. suitable for complex validation 
        2. suitable for Unit Testing 

      Disadv 
      -----
        1. larger learning curve 


Automation Testing 
-------------
  0. Static Type Checking 
      Tools: TypeScript

  1. Unit Testing 
      * Tesitng the tiny individual unit 
      * Testing the comp, service, pipes, directives in isolation 
      * Testing the comp w/o connecting to REST API 
      * Bug Reduction Density: 40-80% 

      Tools: Jasmine Js, Karma
      
  2. Integration Testing 
      * Differnt units, modules,  or components tested as combined entity
      * behavior of the app would be tested 

      Tools: Jasmine Js, Karma

  3. E2E / End to End Testing  
      * Testing the whole app 
      
      Tools: Selenium or CypressJS or Protractor or Cucumber or Tosca or Playwright 
      

2 Approaches / Modern Software Dev Methodologies (as of 2023)
----
  Dev writes tests => Dev write fn code => (TOOLS) => instant feedback of success/failure 

  1. Test Driven Development (TDD)
      * is a programming Practice that instructs the dev to write NEW CODE only if an automated test has failed 

      dev writes test cases 
        (Instant Feedback of Failure/bug)
          dev writes fn code 
            (Instant Feedback of Success)
              [CODE COMPLETE]

      Testing Pattern: AAA (Arrange, Act, Assert)
      Tools: JEST JS, Mocha, Chai 
      Used in React Projects normally 

  2. Behavior Driven Development (BDD)  -- [TO LEARN]
      * is an agile s/w methodology 
      * an app is documented and designed around the behaviour the end user expects to experience

      dev writes test cases (around the behavior of the app)
        (Instant Feedback of Failure/bug)
          dev writes fn code 
            (Instant Feedback of Success)
              [CODE COMPLETE]

      Testing Pattern: Given/When/Then
      Tools: Jasmine JS with Karma 

Tools in Detail
=========
  Jasmine JS -- is unit testing framework 
  Karma JS - Test Runner 

What will you learn?
----
  1. How to write tests?
  2. Where to write? 
  3. How to test our app against the identified tests?

=============

Course Plan 
====
  1. Testing components
    1.1 TS code 
        variables 
        methods 
    1.2 HTML Code 
    1.3 CSS Code 

  2. Testing Services 
  3. Testing Directives (Todo)
  4. Testing Pipes (Todo)